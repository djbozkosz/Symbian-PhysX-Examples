#include "GlConstants.h"

const char* GlConstants::ILLUMINATION_VERTEX_SHADER =
{
	"attribute vec3 _position;\n"
	"attribute vec3 _normal;\n"
	"attribute vec2 _textureCoord;\n"
	"\n"
	"uniform mat4 mvp;\n"
	"uniform mat4 mw;\n"
	"uniform mat3 mnit;\n"
	"uniform mat4 mvpShadow;\n"
	"\n"
	"varying vec3 positionWorld;\n"
	"varying vec4 positionShadow;\n"
	"varying vec3 normalDir;\n"
	"varying vec2 texCoord;\n"
	"\n"
	"void main()\n"
	"{\n"
	"	positionWorld  = vec4(mw * vec4(_position, 1.0)).xyz;\n"
	"	positionShadow = vec4(mvpShadow * vec4(_position, 1.0));\n"
	"	normalDir      = normalize(mnit * normalize(_normal));\n"
	"	texCoord       = _textureCoord;\n"
	"	gl_Position    = mvp * vec4(_position, 1.0);\n"
	"}\n"
};

const char* GlConstants::ILLUMINATION_FRAGMENT_SHADER =
{
	"varying vec3 positionWorld;\n"
	"varying vec4 positionShadow;\n"
	"varying vec3 normalDir;\n"
	"varying vec2 texCoord;\n"
	"\n"
	"uniform sampler2D diffTex;\n"
	"uniform sampler2D shadTex;\n"
	"\n"
	"uniform vec3 cam;\n"
	"uniform vec4 color;\n"
	"uniform vec2 tiling;\n"
	"\n"
	"float textureShadowSampler(vec4 coord)\n"
	"{\n"
	"	vec3 coordProj  = coord.xyz / coord.w;\n"
	"	vec4 shadowSize = vec4(1024.0, 1024.0, 0.0009765625, 0.0009765625);\n"
	"	//return (texture2D(shadTex, coordProj.xy).r + 0.0005 >= coordProj.z) ? 1.0 : 0.0;\n"
	"\n"
	"	vec2 bigTexelSize      = coordProj.xy * shadowSize.xy;\n"
	"	vec2 bigTexelSizeFloor = floor(bigTexelSize);\n"
	"	vec2 texelOffset       = bigTexelSize - bigTexelSizeFloor;\n"
	"	vec2 texelFloor        = bigTexelSizeFloor * shadowSize.zw;\n"
	"\n"
	"	float v0    = (texture2D(shadTex, texelFloor.xy).r >= coordProj.z) ? 1.0 : 0.0;\n"
	"	float v1    = (texture2D(shadTex, texelFloor.xy + vec2(shadowSize.z, 0.0)).r >= coordProj.z) ? 1.0 : 0.0;\n"
	"	float v2    = (texture2D(shadTex, texelFloor.xy + vec2(0.0, shadowSize.w)).r >= coordProj.z) ? 1.0 : 0.0;\n"
	"	float v3    = (texture2D(shadTex, texelFloor.xy + shadowSize.zw).r >= coordProj.z) ? 1.0 : 0.0;\n"
	"\n"
	"	float m01   = mix(v0, v1, texelOffset.x);\n"
	"	float m23   = mix(v2, v3, texelOffset.x);\n"
	"	float m0123 = mix(m01, m23, texelOffset.y);\n"
	"\n"
	"	return m0123;\n"
	"}\n"
	"\n"
	"void main()\n"
	"{\n"
	"	vec3  ambColor       = vec3(0.3, 0.4, 0.5);\n"
	"	vec3  lightPos       = vec3(-7.0, 10.0, -10.0);\n"
	"	vec2  lightRange     = vec2(1.0, 50.0);\n"
	"	vec3  lightColor     = vec3(1.5, 1.2, 1.0);\n"
	"	vec3  lightSpecColor = vec3(0.0625, 0.0625, 0.0625);\n"
	"\n"
	"	vec3  diffuse        = texture2D(diffTex, texCoord * tiling).rgb;\n"
	"	float diffuseGray    = diffuse.r * 0.3 + diffuse.g * 0.59 + diffuse.b * 0.11;\n"
	"	float vis            = textureShadowSampler(positionShadow);\n"
	"\n"
	"	vec3  viewDir        = normalize(cam - positionWorld);\n"
	"	vec3  lightDir       = lightPos - positionWorld;\n"
	"\n"
	"	float lightDist      = clamp((length(lightDir) - lightRange.x) / (lightRange.y - lightRange.x) * -1.0 + 1.0, 0.0, 1.0);\n"
	"	lightDir             = normalize(lightDir);\n"
	"	float lightDot       = max(0.0, dot(normalDir, lightDir));\n"
	"	float lightSpecDot   = max(0.0, dot(normalDir, normalize(lightDir + viewDir)));\n"
	"\n"
	"	vec3  colorDiff      = lightColor * lightDot * lightDist * vis + ambColor;\n"
	"	vec3  colorSpec      = lightSpecColor * color.a * pow(lightSpecDot, color.a) * lightDist * vis;\n"
	"\n"
	"	gl_FragColor         = vec4(diffuse * color.rgb * colorDiff + diffuseGray * colorSpec, 1.0);\n"
	"}\n"
};

const char* GlConstants::DEPTH_VERTEX_SHADER =
{
	"attribute vec3 _position;\n"
	"\n"
	"uniform mat4 mvp;\n"
	"\n"
	"void main()\n"
	"{\n"
	"	gl_Position = mvp * vec4(_position, 1.0);\n"
	"}\n"
};

const char* GlConstants::DEPTH_FRAGMENT_SHADER =
{
	"void main()\n"
	"{\n"
	"	gl_FragColor = vec4(gl_FragCoord.z, gl_FragCoord.z, gl_FragCoord.z, 1.0);\n"
	"}\n"
};

const float GlConstants::CUBE_VERTICES[] =
{
	-0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f, 0.0f, 0.0f,
	 0.5f,  0.5f, -0.5f,  0.0f,  1.0f,  0.0f, 1.0f, 0.0f,
	-0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f, 0.0f, 1.0f,
	 0.5f,  0.5f,  0.5f,  0.0f,  1.0f,  0.0f, 1.0f, 1.0f,
	 0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f, 0.0f, 0.0f,
	-0.5f, -0.5f, -0.5f,  0.0f, -1.0f,  0.0f, 1.0f, 0.0f,
	 0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f, 0.0f, 1.0f,
	-0.5f, -0.5f,  0.5f,  0.0f, -1.0f,  0.0f, 1.0f, 1.0f,
	-0.5f,  0.5f,  0.5f,  0.0f,  0.0f,  1.0f, 0.0f, 0.0f,
	 0.5f,  0.5f,  0.5f,  0.0f,  0.0f,  1.0f, 1.0f, 0.0f,
	-0.5f, -0.5f,  0.5f,  0.0f,  0.0f,  1.0f, 0.0f, 1.0f,
	 0.5f, -0.5f,  0.5f,  0.0f,  0.0f,  1.0f, 1.0f, 1.0f,
	 0.5f,  0.5f,  0.5f,  1.0f,  0.0f,  0.0f, 0.0f, 0.0f,
	 0.5f,  0.5f, -0.5f,  1.0f,  0.0f,  0.0f, 1.0f, 0.0f,
	 0.5f, -0.5f,  0.5f,  1.0f,  0.0f,  0.0f, 0.0f, 1.0f,
	 0.5f, -0.5f, -0.5f,  1.0f,  0.0f,  0.0f, 1.0f, 1.0f,
	 0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f, 0.0f, 0.0f,
	-0.5f,  0.5f, -0.5f,  0.0f,  0.0f, -1.0f, 1.0f, 0.0f,
	 0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f, 0.0f, 1.0f,
	-0.5f, -0.5f, -0.5f,  0.0f,  0.0f, -1.0f, 1.0f, 1.0f,
	-0.5f,  0.5f, -0.5f, -1.0f,  0.0f,  0.0f, 0.0f, 0.0f,
	-0.5f,  0.5f,  0.5f, -1.0f,  0.0f,  0.0f, 1.0f, 0.0f,
	-0.5f, -0.5f, -0.5f, -1.0f,  0.0f,  0.0f, 0.0f, 1.0f,
	-0.5f, -0.5f,  0.5f, -1.0f,  0.0f,  0.0f, 1.0f, 1.0f
};

const ushort GlConstants::CUBE_INDICES[] =
{
	 0,  2,  1,
	 1,  2,  3,
	 4,  6,  5,
	 5,  6,  7,
	 8, 10,  9,
	 9, 10, 11,
	12, 14, 13,
	13, 14, 15,
	16, 18, 17,
	17, 18, 19,
	20, 22, 21,
	21, 22, 23
};

const float GlConstants::SPHERE_VERTICES[] =
{
	-0.201122f, -1.011114f, 0.0f, -0.19509f, -0.980785f, 0.0f, 0.100561f, 0.0f,
	-0.1858132f, -1.011114f, 0.0769664f, -0.18024f, -0.980785f, 0.0746578f, 0.0929066f, 0.0384832f,
	-0.57275f, -0.85718f, 0.0f, -0.55557f, -0.83147f, 0.0f, 0.286375f, 0.0f,
	-0.529152f, -0.85718f, 0.219182f, -0.51328f, -0.83147f, 0.212608f, 0.264576f, 0.109591f,
	-0.1422152f, -1.011114f, 0.1422152f, -0.13795f, -0.980785f, 0.13795f, 0.0711076f, 0.0711076f,
	-0.404996f, -0.85718f, 0.404996f, -0.392847f, -0.83147f, 0.392847f, 0.202498f, 0.202498f,
	-0.0769664f, -1.011114f, 0.1858132f, -0.0746578f, -0.980785f, 0.18024f, 0.0384832f, 0.0929066f,
	-0.219182f, -0.85718f, 0.529152f, -0.212608f, -0.83147f, 0.51328f, 0.109591f, 0.264576f,
	8.79e-09f, -1.011114f, 0.201122f, 8.53e-09f, -0.980785f, 0.19509f, -4.40e-09f, 0.100561f,
	2.50e-08f, -0.85718f, 0.57275f, 2.43e-08f, -0.83147f, 0.55557f, -1.25e-08f, 0.286375f,
	0.0769664f, -1.011114f, 0.1858132f, 0.0746578f, -0.980785f, 0.18024f, -0.0384832f, 0.0929066f,
	0.219182f, -0.85718f, 0.529152f, 0.212608f, -0.83147f, 0.51328f, -0.109591f, 0.264576f,
	0.1422152f, -1.011114f, 0.1422152f, 0.13795f, -0.980785f, 0.13795f, -0.0711076f, 0.0711076f,
	0.404996f, -0.85718f, 0.404996f, 0.392847f, -0.83147f, 0.392847f, -0.202498f, 0.202498f,
	0.1858132f, -1.011114f, 0.0769664f, 0.18024f, -0.980785f, 0.0746578f, -0.0929066f, 0.0384832f,
	0.529152f, -0.85718f, 0.219182f, 0.51328f, -0.83147f, 0.212607f, -0.264576f, 0.109591f,
	0.201122f, -1.011114f, -1.76e-08f, 0.19509f, -0.980785f, -1.71e-08f, -0.100561f, -8.79e-09f,
	0.57275f, -0.85718f, -5.01e-08f, 0.55557f, -0.83147f, -4.86e-08f, -0.286375f, -2.50e-08f,
	0.1858132f, -1.011114f, -0.0769664f, 0.18024f, -0.980785f, -0.0746578f, -0.0929066f, -0.0384832f,
	0.529152f, -0.85718f, -0.219182f, 0.51328f, -0.83147f, -0.212608f, -0.264576f, -0.109591f,
	0.1422152f, -1.011114f, -0.1422154f, 0.13795f, -0.980785f, -0.13795f, -0.0711076f, -0.0711077f,
	0.404994f, -0.85718f, -0.404996f, 0.392847f, -0.83147f, -0.392848f, -0.202497f, -0.202498f,
	0.0769664f, -1.011114f, -0.1858132f, 0.0746577f, -0.980785f, -0.18024f, -0.0384832f, -0.0929066f,
	0.219182f, -0.85718f, -0.529152f, 0.212607f, -0.83147f, -0.51328f, -0.109591f, -0.264576f,
	-2.40e-09f, -1.011114f, -0.201122f, -2.33e-09f, -0.980785f, -0.19509f, 1.20e-09f, -0.100561f,
	-6.83e-09f, -0.85718f, -0.57275f, -6.63e-09f, -0.83147f, -0.55557f, 3.41e-09f, -0.286375f,
	-0.0769664f, -1.011114f, -0.1858132f, -0.0746578f, -0.980785f, -0.18024f, 0.0384832f, -0.0929066f,
	-0.219182f, -0.85718f, -0.529152f, -0.212608f, -0.83147f, -0.51328f, 0.109591f, -0.264576f,
	-0.1422154f, -1.011114f, -0.1422152f, -0.13795f, -0.980785f, -0.13795f, 0.0711077f, -0.0711076f,
	-0.404996f, -0.85718f, -0.404994f, -0.392848f, -0.83147f, -0.392847f, 0.202498f, -0.202497f,
	-0.1858132f, -1.011114f, -0.0769664f, -0.18024f, -0.980785f, -0.0746578f, 0.0929066f, -0.0384832f,
	-0.529152f, -0.85718f, -0.219182f, -0.51328f, -0.83147f, -0.212608f, 0.264576f, -0.109591f,
	-0.529152f, -0.85718f, -0.219182f, -0.51328f, -0.83147f, -0.212608f, 0.264576f, -0.109591f,
	-0.85718f, -0.57275f, 0.0f, -0.83147f, -0.55557f, 0.0f, 0.42859f, 0.0f,
	-0.791932f, -0.57275f, 0.328028f, -0.768178f, -0.55557f, 0.31819f, 0.395966f, 0.164014f,
	-0.791932f, -0.57275f, 0.328028f, -0.768178f, -0.55557f, 0.31819f, 0.395966f, 0.164014f,
	-0.606118f, -0.57275f, 0.606118f, -0.587938f, -0.55557f, 0.587938f, 0.303059f, 0.303059f,
	-0.606118f, -0.57275f, 0.606118f, -0.587938f, -0.55557f, 0.587938f, 0.303059f, 0.303059f,
	-0.328028f, -0.57275f, 0.791932f, -0.31819f, -0.55557f, 0.768178f, 0.164014f, 0.395966f,
	-0.328028f, -0.57275f, 0.791932f, -0.31819f, -0.55557f, 0.768178f, 0.164014f, 0.395966f,
	3.75e-08f, -0.57275f, 0.85718f, 3.63e-08f, -0.55557f, 0.83147f, -1.87e-08f, 0.42859f,
	3.75e-08f, -0.57275f, 0.85718f, 3.63e-08f, -0.55557f, 0.83147f, -1.87e-08f, 0.42859f,
	0.328028f, -0.57275f, 0.791932f, 0.31819f, -0.55557f, 0.768178f, -0.164014f, 0.395966f,
	0.328028f, -0.57275f, 0.791932f, 0.31819f, -0.55557f, 0.768178f, -0.164014f, 0.395966f,
	0.606118f, -0.57275f, 0.606118f, 0.587938f, -0.55557f, 0.587938f, -0.303059f, 0.303059f,
	0.606118f, -0.57275f, 0.606118f, 0.587938f, -0.55557f, 0.587938f, -0.303059f, 0.303059f,
	0.791932f, -0.57275f, 0.328028f, 0.768178f, -0.55557f, 0.31819f, -0.395966f, 0.164014f,
	0.791932f, -0.57275f, 0.328028f, 0.768178f, -0.55557f, 0.31819f, -0.395966f, 0.164014f,
	0.85718f, -0.57275f, -7.49e-08f, 0.83147f, -0.55557f, -7.27e-08f, -0.42859f, -3.75e-08f,
	0.85718f, -0.57275f, -7.49e-08f, 0.83147f, -0.55557f, -7.27e-08f, -0.42859f, -3.75e-08f,
	0.791932f, -0.57275f, -0.328028f, 0.768178f, -0.55557f, -0.31819f, -0.395966f, -0.164014f,
	0.791932f, -0.57275f, -0.328028f, 0.768178f, -0.55557f, -0.31819f, -0.395966f, -0.164014f,
	0.606118f, -0.57275f, -0.606118f, 0.587938f, -0.55557f, -0.587938f, -0.303059f, -0.303059f,
	0.606118f, -0.57275f, -0.606118f, 0.587938f, -0.55557f, -0.587938f, -0.303059f, -0.303059f,
	0.328028f, -0.57275f, -0.791932f, 0.318189f, -0.55557f, -0.768178f, -0.164014f, -0.395966f,
	0.328028f, -0.57275f, -0.791932f, 0.318189f, -0.55557f, -0.768178f, -0.164014f, -0.395966f,
	-1.02e-08f, -0.57275f, -0.85718f, -9.92e-09f, -0.55557f, -0.83147f, 5.11e-09f, -0.42859f,
	-1.02e-08f, -0.57275f, -0.85718f, -9.92e-09f, -0.55557f, -0.83147f, 5.11e-09f, -0.42859f,
	-0.328028f, -0.57275f, -0.791932f, -0.31819f, -0.55557f, -0.768178f, 0.164014f, -0.395966f,
	-0.328028f, -0.57275f, -0.791932f, -0.31819f, -0.55557f, -0.768178f, 0.164014f, -0.395966f,
	-0.606118f, -0.57275f, -0.606118f, -0.587938f, -0.55557f, -0.587938f, 0.303059f, -0.303059f,
	-0.606118f, -0.57275f, -0.606118f, -0.587938f, -0.55557f, -0.587938f, 0.303059f, -0.303059f,
	-0.791932f, -0.57275f, -0.328028f, -0.768178f, -0.55557f, -0.31819f, 0.395966f, -0.164014f,
	-0.791932f, -0.57275f, -0.328028f, -0.768178f, -0.55557f, -0.31819f, 0.395966f, -0.164014f,
	-0.85718f, -0.57275f, 0.0f, -0.83147f, -0.55557f, 0.0f, 0.0f, 0.286375f,
	-0.791932f, -0.57275f, 0.328028f, -0.768178f, -0.55557f, 0.31819f, 0.164014f, 0.286375f,
	-1.011114f, -0.201122f, 0.0f, -0.980785f, -0.19509f, 0.0f, 0.0f, 0.100561f,
	-0.934146f, -0.201122f, 0.386936f, -0.906127f, -0.19509f, 0.37533f, 0.193468f, 0.100561f,
	-0.606118f, -0.57275f, 0.606118f, -0.587938f, -0.55557f, 0.587938f, 0.303059f, 0.286375f,
	-0.714964f, -0.201122f, 0.714964f, -0.69352f, -0.19509f, 0.69352f, 0.357482f, 0.100561f,
	-0.606118f, -0.57275f, 0.606118f, -0.587938f, -0.55557f, 0.587938f, 0.783059f, 0.786375f,
	-0.328028f, -0.57275f, 0.791932f, -0.31819f, -0.55557f, 0.768178f, 0.644014f, 0.786375f,
	-0.714964f, -0.201122f, 0.714964f, -0.69352f, -0.19509f, 0.69352f, 0.837482f, 0.600561f,
	-0.386936f, -0.201122f, 0.934146f, -0.37533f, -0.19509f, 0.906127f, 0.673468f, 0.600561f,
	3.75e-08f, -0.57275f, 0.85718f, 3.63e-08f, -0.55557f, 0.83147f, 0.48f, 0.786375f,
	4.42e-08f, -0.201122f, 1.011114f, 4.29e-08f, -0.19509f, 0.980785f, 0.48f, 0.600561f,
	0.328028f, -0.57275f, 0.791932f, 0.31819f, -0.55557f, 0.768178f, 0.315986f, 0.786375f,
	0.386936f, -0.201122f, 0.934146f, 0.37533f, -0.19509f, 0.906127f, 0.286532f, 0.600561f,
	0.606118f, -0.57275f, 0.606118f, 0.587938f, -0.55557f, 0.587938f, 0.176941f, 0.786375f,
	0.714964f, -0.201122f, 0.714964f, 0.69352f, -0.19509f, 0.69352f, 0.122518f, 0.600561f,
	0.606118f, -0.57275f, 0.606118f, 0.587938f, -0.55557f, 0.587938f, 0.303059f, 0.286375f,
	0.791932f, -0.57275f, 0.328028f, 0.768178f, -0.55557f, 0.31819f, 0.164014f, 0.286375f,
	0.714964f, -0.201122f, 0.714964f, 0.69352f, -0.19509f, 0.69352f, 0.357482f, 0.100561f,
	0.934146f, -0.201122f, 0.386936f, 0.906128f, -0.19509f, 0.37533f, 0.193468f, 0.100561f,
	0.85718f, -0.57275f, -7.49e-08f, 0.83147f, -0.55557f, -7.27e-08f, -3.75e-08f, 0.286375f,
	1.011114f, -0.201122f, -8.84e-08f, 0.980785f, -0.19509f, -8.57e-08f, -4.42e-08f, 0.100561f,
	0.791932f, -0.57275f, -0.328028f, 0.768178f, -0.55557f, -0.31819f, -0.164014f, 0.286375f,
	0.934146f, -0.201122f, -0.386936f, 0.906127f, -0.19509f, -0.37533f, -0.193468f, 0.100561f,
	0.606118f, -0.57275f, -0.606118f, 0.587938f, -0.55557f, -0.587938f, -0.303059f, 0.286375f,
	0.714964f, -0.201122f, -0.714964f, 0.69352f, -0.19509f, -0.69352f, -0.357482f, 0.100561f,
	0.606118f, -0.57275f, -0.606118f, 0.587938f, -0.55557f, -0.587938f, 0.176941f, 0.786375f,
	0.328028f, -0.57275f, -0.791932f, 0.318189f, -0.55557f, -0.768178f, 0.315986f, 0.786375f,
	0.714964f, -0.201122f, -0.714964f, 0.69352f, -0.19509f, -0.69352f, 0.122518f, 0.600561f,
	0.386936f, -0.201122f, -0.934146f, 0.37533f, -0.19509f, -0.906128f, 0.286532f, 0.600561f,
	-1.02e-08f, -0.57275f, -0.85718f, -9.92e-09f, -0.55557f, -0.83147f, 0.48f, 0.786375f,
	-1.21e-08f, -0.201122f, -1.011114f, -1.17e-08f, -0.19509f, -0.980785f, 0.48f, 0.600561f,
	-0.328028f, -0.57275f, -0.791932f, -0.31819f, -0.55557f, -0.768178f, 0.644014f, 0.786375f,
	-0.386936f, -0.201122f, -0.934146f, -0.37533f, -0.19509f, -0.906127f, 0.673468f, 0.600561f,
	-0.606118f, -0.57275f, -0.606118f, -0.587938f, -0.55557f, -0.587938f, 0.783059f, 0.786375f,
	-0.714966f, -0.201122f, -0.714964f, -0.69352f, -0.19509f, -0.69352f, 0.837482f, 0.600561f,
	-0.606118f, -0.57275f, -0.606118f, -0.587938f, -0.55557f, -0.587938f, -0.303059f, 0.286375f,
	-0.791932f, -0.57275f, -0.328028f, -0.768178f, -0.55557f, -0.31819f, -0.164014f, 0.286375f,
	-0.714966f, -0.201122f, -0.714964f, -0.69352f, -0.19509f, -0.69352f, -0.357482f, 0.100561f,
	-0.934146f, -0.201122f, -0.386936f, -0.906127f, -0.19509f, -0.37533f, -0.193468f, 0.100561f,
	-0.934146f, -0.201122f, -0.386936f, -0.906127f, -0.19509f, -0.37533f, -0.193468f, 0.100561f,
	-1.011114f, 0.201122f, 0.0f, -0.980785f, 0.19509f, 0.0f, 0.0f, -0.100561f,
	-0.934146f, 0.201122f, 0.386936f, -0.906127f, 0.19509f, 0.37533f, 0.193468f, -0.100561f,
	-0.934146f, 0.201122f, 0.386936f, -0.906127f, 0.19509f, 0.37533f, 0.193468f, -0.100561f,
	-0.714964f, 0.201122f, 0.714964f, -0.69352f, 0.19509f, 0.69352f, 0.357482f, -0.100561f,
	-0.714964f, 0.201122f, 0.714964f, -0.69352f, 0.19509f, 0.69352f, 0.837482f, 0.399439f,
	-0.386936f, 0.201122f, 0.934146f, -0.37533f, 0.19509f, 0.906127f, 0.673468f, 0.399439f,
	-0.386936f, 0.201122f, 0.934146f, -0.37533f, 0.19509f, 0.906127f, 0.673468f, 0.399439f,
	4.42e-08f, 0.201122f, 1.011114f, 4.29e-08f, 0.19509f, 0.980785f, 0.48f, 0.399439f,
	4.42e-08f, 0.201122f, 1.011114f, 4.29e-08f, 0.19509f, 0.980785f, 0.48f, 0.399439f,
	0.386936f, 0.201122f, 0.934146f, 0.37533f, 0.19509f, 0.906127f, 0.286532f, 0.399439f,
	0.386936f, 0.201122f, 0.934146f, 0.37533f, 0.19509f, 0.906127f, 0.286532f, 0.399439f,
	0.714964f, 0.201122f, 0.714964f, 0.69352f, 0.19509f, 0.69352f, 0.122518f, 0.399439f,
	0.714964f, 0.201122f, 0.714964f, 0.69352f, 0.19509f, 0.69352f, 0.357482f, -0.100561f,
	0.934146f, 0.201122f, 0.386936f, 0.906128f, 0.19509f, 0.37533f, 0.193468f, -0.100561f,
	0.934146f, 0.201122f, 0.386936f, 0.906128f, 0.19509f, 0.37533f, 0.193468f, -0.100561f,
	1.011114f, 0.201122f, -8.84e-08f, 0.980785f, 0.19509f, -8.57e-08f, -4.42e-08f, -0.100561f,
	1.011114f, 0.201122f, -8.84e-08f, 0.980785f, 0.19509f, -8.57e-08f, -4.42e-08f, -0.100561f,
	0.934146f, 0.201122f, -0.386936f, 0.906127f, 0.19509f, -0.37533f, -0.193468f, -0.100561f,
	0.934146f, 0.201122f, -0.386936f, 0.906127f, 0.19509f, -0.37533f, -0.193468f, -0.100561f,
	0.714964f, 0.201122f, -0.714964f, 0.69352f, 0.19509f, -0.69352f, -0.357482f, -0.100561f,
	0.714964f, 0.201122f, -0.714964f, 0.69352f, 0.19509f, -0.69352f, 0.122518f, 0.399439f,
	0.386936f, 0.201122f, -0.934146f, 0.37533f, 0.19509f, -0.906128f, 0.286532f, 0.399439f,
	0.386936f, 0.201122f, -0.934146f, 0.37533f, 0.19509f, -0.906128f, 0.286532f, 0.399439f,
	-1.21e-08f, 0.201122f, -1.011114f, -1.17e-08f, 0.19509f, -0.980785f, 0.48f, 0.399439f,
	-1.21e-08f, 0.201122f, -1.011114f, -1.17e-08f, 0.19509f, -0.980785f, 0.48f, 0.399439f,
	-0.386936f, 0.201122f, -0.934146f, -0.37533f, 0.19509f, -0.906127f, 0.673468f, 0.399439f,
	-0.386936f, 0.201122f, -0.934146f, -0.37533f, 0.19509f, -0.906127f, 0.673468f, 0.399439f,
	-0.714966f, 0.201122f, -0.714964f, -0.69352f, 0.19509f, -0.69352f, 0.837482f, 0.399439f,
	-0.714966f, 0.201122f, -0.714964f, -0.69352f, 0.19509f, -0.69352f, -0.357482f, -0.100561f,
	-0.934146f, 0.201122f, -0.386936f, -0.906127f, 0.19509f, -0.37533f, -0.193468f, -0.100561f,
	-0.934146f, 0.201122f, -0.386936f, -0.906127f, 0.19509f, -0.37533f, -0.193468f, -0.100561f,
	-0.85718f, 0.57275f, 0.0f, -0.83147f, 0.55557f, 0.0f, 0.0f, -0.286375f,
	-0.791932f, 0.57275f, 0.328028f, -0.768178f, 0.55557f, 0.31819f, 0.164014f, -0.286375f,
	-0.791932f, 0.57275f, 0.328028f, -0.768178f, 0.55557f, 0.31819f, 0.164014f, -0.286375f,
	-0.606118f, 0.57275f, 0.606118f, -0.587938f, 0.55557f, 0.587938f, 0.303059f, -0.286375f,
	-0.606118f, 0.57275f, 0.606118f, -0.587938f, 0.55557f, 0.587938f, 0.783059f, 0.213625f,
	-0.328028f, 0.57275f, 0.791932f, -0.31819f, 0.55557f, 0.768178f, 0.644014f, 0.213625f,
	-0.328028f, 0.57275f, 0.791932f, -0.31819f, 0.55557f, 0.768178f, 0.644014f, 0.213625f,
	3.75e-08f, 0.57275f, 0.85718f, 3.63e-08f, 0.55557f, 0.83147f, 0.48f, 0.213625f,
	3.75e-08f, 0.57275f, 0.85718f, 3.63e-08f, 0.55557f, 0.83147f, 0.48f, 0.213625f,
	0.328028f, 0.57275f, 0.791932f, 0.31819f, 0.55557f, 0.768178f, 0.315986f, 0.213625f,
	0.328028f, 0.57275f, 0.791932f, 0.31819f, 0.55557f, 0.768178f, 0.315986f, 0.213625f,
	0.606118f, 0.57275f, 0.606118f, 0.587938f, 0.55557f, 0.587938f, 0.176941f, 0.213625f,
	0.606118f, 0.57275f, 0.606118f, 0.587938f, 0.55557f, 0.587938f, 0.303059f, -0.286375f,
	0.791932f, 0.57275f, 0.328028f, 0.768178f, 0.55557f, 0.31819f, 0.164014f, -0.286375f,
	0.791932f, 0.57275f, 0.328028f, 0.768178f, 0.55557f, 0.31819f, 0.164014f, -0.286375f,
	0.85718f, 0.57275f, -7.49e-08f, 0.83147f, 0.55557f, -7.27e-08f, -3.75e-08f, -0.286375f,
	0.85718f, 0.57275f, -7.49e-08f, 0.83147f, 0.55557f, -7.27e-08f, -3.75e-08f, -0.286375f,
	0.791932f, 0.57275f, -0.328028f, 0.768178f, 0.55557f, -0.31819f, -0.164014f, -0.286375f,
	0.791932f, 0.57275f, -0.328028f, 0.768178f, 0.55557f, -0.31819f, -0.164014f, -0.286375f,
	0.606118f, 0.57275f, -0.606118f, 0.587938f, 0.55557f, -0.587938f, -0.303059f, -0.286375f,
	0.606118f, 0.57275f, -0.606118f, 0.587938f, 0.55557f, -0.587938f, 0.176941f, 0.213625f,
	0.328028f, 0.57275f, -0.791932f, 0.318189f, 0.55557f, -0.768178f, 0.315986f, 0.213625f,
	0.328028f, 0.57275f, -0.791932f, 0.318189f, 0.55557f, -0.768178f, 0.315986f, 0.213625f,
	-1.02e-08f, 0.57275f, -0.85718f, -9.92e-09f, 0.55557f, -0.83147f, 0.48f, 0.213625f,
	-1.02e-08f, 0.57275f, -0.85718f, -9.92e-09f, 0.55557f, -0.83147f, 0.48f, 0.213625f,
	-0.328028f, 0.57275f, -0.791932f, -0.31819f, 0.55557f, -0.768178f, 0.644014f, 0.213625f,
	-0.328028f, 0.57275f, -0.791932f, -0.31819f, 0.55557f, -0.768178f, 0.644014f, 0.213625f,
	-0.606118f, 0.57275f, -0.606118f, -0.587938f, 0.55557f, -0.587938f, 0.783059f, 0.213625f,
	-0.606118f, 0.57275f, -0.606118f, -0.587938f, 0.55557f, -0.587938f, -0.303059f, -0.286375f,
	-0.791932f, 0.57275f, -0.328028f, -0.768178f, 0.55557f, -0.31819f, -0.164014f, -0.286375f,
	-0.791932f, 0.57275f, -0.328028f, -0.768178f, 0.55557f, -0.31819f, -0.164014f, -0.286375f,
	-0.85718f, 0.57275f, 0.0f, -0.83147f, 0.55557f, 0.0f, 0.42859f, 0.0f,
	-0.791932f, 0.57275f, 0.328028f, -0.768178f, 0.55557f, 0.31819f, 0.395966f, 0.164014f,
	-0.57275f, 0.85718f, 0.0f, -0.55557f, 0.83147f, 0.0f, 0.286375f, 0.0f,
	-0.529152f, 0.85718f, 0.219182f, -0.51328f, 0.83147f, 0.212608f, 0.264576f, 0.109591f,
	-0.606118f, 0.57275f, 0.606118f, -0.587938f, 0.55557f, 0.587938f, 0.303059f, 0.303059f,
	-0.404996f, 0.85718f, 0.404996f, -0.392847f, 0.83147f, 0.392847f, 0.202498f, 0.202498f,
	-0.328028f, 0.57275f, 0.791932f, -0.31819f, 0.55557f, 0.768178f, 0.164014f, 0.395966f,
	-0.219182f, 0.85718f, 0.529152f, -0.212608f, 0.83147f, 0.51328f, 0.109591f, 0.264576f,
	3.75e-08f, 0.57275f, 0.85718f, 3.63e-08f, 0.55557f, 0.83147f, -1.87e-08f, 0.42859f,
	2.50e-08f, 0.85718f, 0.57275f, 2.43e-08f, 0.83147f, 0.55557f, -1.25e-08f, 0.286375f,
	0.328028f, 0.57275f, 0.791932f, 0.31819f, 0.55557f, 0.768178f, -0.164014f, 0.395966f,
	0.219182f, 0.85718f, 0.529152f, 0.212608f, 0.83147f, 0.51328f, -0.109591f, 0.264576f,
	0.606118f, 0.57275f, 0.606118f, 0.587938f, 0.55557f, 0.587938f, -0.303059f, 0.303059f,
	0.404996f, 0.85718f, 0.404996f, 0.392847f, 0.83147f, 0.392847f, -0.202498f, 0.202498f,
	0.791932f, 0.57275f, 0.328028f, 0.768178f, 0.55557f, 0.31819f, -0.395966f, 0.164014f,
	0.529152f, 0.85718f, 0.219182f, 0.51328f, 0.83147f, 0.212607f, -0.264576f, 0.109591f,
	0.85718f, 0.57275f, -7.49e-08f, 0.83147f, 0.55557f, -7.27e-08f, -0.42859f, -3.75e-08f,
	0.57275f, 0.85718f, -5.01e-08f, 0.55557f, 0.83147f, -4.86e-08f, -0.286375f, -2.50e-08f,
	0.791932f, 0.57275f, -0.328028f, 0.768178f, 0.55557f, -0.31819f, -0.395966f, -0.164014f,
	0.529152f, 0.85718f, -0.219182f, 0.51328f, 0.83147f, -0.212608f, -0.264576f, -0.109591f,
	0.606118f, 0.57275f, -0.606118f, 0.587938f, 0.55557f, -0.587938f, -0.303059f, -0.303059f,
	0.404994f, 0.85718f, -0.404996f, 0.392847f, 0.83147f, -0.392848f, -0.202497f, -0.202498f,
	0.328028f, 0.57275f, -0.791932f, 0.318189f, 0.55557f, -0.768178f, -0.164014f, -0.395966f,
	0.219182f, 0.85718f, -0.529152f, 0.212607f, 0.83147f, -0.51328f, -0.109591f, -0.264576f,
	-1.02e-08f, 0.57275f, -0.85718f, -9.92e-09f, 0.55557f, -0.83147f, 5.11e-09f, -0.42859f,
	-6.83e-09f, 0.85718f, -0.57275f, -6.63e-09f, 0.83147f, -0.55557f, 3.41e-09f, -0.286375f,
	-0.328028f, 0.57275f, -0.791932f, -0.31819f, 0.55557f, -0.768178f, 0.164014f, -0.395966f,
	-0.219182f, 0.85718f, -0.529152f, -0.212608f, 0.83147f, -0.51328f, 0.109591f, -0.264576f,
	-0.606118f, 0.57275f, -0.606118f, -0.587938f, 0.55557f, -0.587938f, 0.303059f, -0.303059f,
	-0.404996f, 0.85718f, -0.404994f, -0.392848f, 0.83147f, -0.392847f, 0.202498f, -0.202497f,
	-0.791932f, 0.57275f, -0.328028f, -0.768178f, 0.55557f, -0.31819f, 0.395966f, -0.164014f,
	-0.529152f, 0.85718f, -0.219182f, -0.51328f, 0.83147f, -0.212608f, 0.264576f, -0.109591f,
	-0.529152f, 0.85718f, -0.219182f, -0.51328f, 0.83147f, -0.212608f, 0.264576f, -0.109591f,
	-0.201122f, 1.011114f, 0.0f, -0.19509f, 0.980785f, 0.0f, 0.100561f, 0.0f,
	-0.1858132f, 1.011114f, 0.0769664f, -0.18024f, 0.980785f, 0.0746578f, 0.0929066f, 0.0384832f,
	-0.1858132f, 1.011114f, 0.0769664f, -0.18024f, 0.980785f, 0.0746578f, 0.0929066f, 0.0384832f,
	-0.1422152f, 1.011114f, 0.1422152f, -0.13795f, 0.980785f, 0.13795f, 0.0711076f, 0.0711076f,
	-0.1422152f, 1.011114f, 0.1422152f, -0.13795f, 0.980785f, 0.13795f, 0.0711076f, 0.0711076f,
	-0.0769664f, 1.011114f, 0.1858132f, -0.0746578f, 0.980785f, 0.18024f, 0.0384832f, 0.0929066f,
	-0.0769664f, 1.011114f, 0.1858132f, -0.0746578f, 0.980785f, 0.18024f, 0.0384832f, 0.0929066f,
	8.79e-09f, 1.011114f, 0.201122f, 8.53e-09f, 0.980785f, 0.19509f, -4.40e-09f, 0.100561f,
	8.79e-09f, 1.011114f, 0.201122f, 8.53e-09f, 0.980785f, 0.19509f, -4.40e-09f, 0.100561f,
	0.0769664f, 1.011114f, 0.1858132f, 0.0746578f, 0.980785f, 0.18024f, -0.0384832f, 0.0929066f,
	0.0769664f, 1.011114f, 0.1858132f, 0.0746578f, 0.980785f, 0.18024f, -0.0384832f, 0.0929066f,
	0.1422152f, 1.011114f, 0.1422152f, 0.13795f, 0.980785f, 0.13795f, -0.0711076f, 0.0711076f,
	0.1422152f, 1.011114f, 0.1422152f, 0.13795f, 0.980785f, 0.13795f, -0.0711076f, 0.0711076f,
	0.1858132f, 1.011114f, 0.0769664f, 0.18024f, 0.980785f, 0.0746578f, -0.0929066f, 0.0384832f,
	0.1858132f, 1.011114f, 0.0769664f, 0.18024f, 0.980785f, 0.0746578f, -0.0929066f, 0.0384832f,
	0.201122f, 1.011114f, -1.76e-08f, 0.19509f, 0.980785f, -1.71e-08f, -0.100561f, -8.79e-09f,
	0.201122f, 1.011114f, -1.76e-08f, 0.19509f, 0.980785f, -1.71e-08f, -0.100561f, -8.79e-09f,
	0.1858132f, 1.011114f, -0.0769664f, 0.18024f, 0.980785f, -0.0746578f, -0.0929066f, -0.0384832f,
	0.1858132f, 1.011114f, -0.0769664f, 0.18024f, 0.980785f, -0.0746578f, -0.0929066f, -0.0384832f,
	0.1422152f, 1.011114f, -0.1422154f, 0.13795f, 0.980785f, -0.13795f, -0.0711076f, -0.0711077f,
	0.1422152f, 1.011114f, -0.1422154f, 0.13795f, 0.980785f, -0.13795f, -0.0711076f, -0.0711077f,
	0.0769664f, 1.011114f, -0.1858132f, 0.0746577f, 0.980785f, -0.18024f, -0.0384832f, -0.0929066f,
	0.0769664f, 1.011114f, -0.1858132f, 0.0746577f, 0.980785f, -0.18024f, -0.0384832f, -0.0929066f,
	-2.40e-09f, 1.011114f, -0.201122f, -2.33e-09f, 0.980785f, -0.19509f, 1.20e-09f, -0.100561f,
	-2.40e-09f, 1.011114f, -0.201122f, -2.33e-09f, 0.980785f, -0.19509f, 1.20e-09f, -0.100561f,
	-0.0769664f, 1.011114f, -0.1858132f, -0.0746578f, 0.980785f, -0.18024f, 0.0384832f, -0.0929066f,
	-0.0769664f, 1.011114f, -0.1858132f, -0.0746578f, 0.980785f, -0.18024f, 0.0384832f, -0.0929066f,
	-0.1422154f, 1.011114f, -0.1422152f, -0.13795f, 0.980785f, -0.13795f, 0.0711077f, -0.0711076f,
	-0.1422154f, 1.011114f, -0.1422152f, -0.13795f, 0.980785f, -0.13795f, 0.0711077f, -0.0711076f,
	-0.1858132f, 1.011114f, -0.0769664f, -0.18024f, 0.980785f, -0.0746578f, 0.0929066f, -0.0384832f,
	-0.1858132f, 1.011114f, -0.0769664f, -0.18024f, 0.980785f, -0.0746578f, 0.0929066f, -0.0384832f,
	0.0f, -1.030922f, 0.0f, 0.0f, -1.0f, 0.0f, 0.0f, 0.0f,
	0.0f, 1.030922f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f,
	0.0f, 1.030922f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f
};

const ushort GlConstants::SPHERE_INDICES[] =
{
	0, 1, 2,
	3, 2, 1,
	1, 4, 3,
	5, 3, 4,
	4, 6, 5,
	7, 5, 6,
	6, 8, 7,
	9, 7, 8,
	8, 10, 9,
	11, 9, 10,
	10, 12, 11,
	13, 11, 12,
	12, 14, 13,
	15, 13, 14,
	14, 16, 15,
	17, 15, 16,
	16, 18, 17,
	19, 17, 18,
	18, 20, 19,
	21, 19, 20,
	20, 22, 21,
	23, 21, 22,
	22, 24, 23,
	25, 23, 24,
	24, 26, 25,
	27, 25, 26,
	26, 28, 27,
	29, 27, 28,
	28, 30, 29,
	31, 29, 30,
	30, 0, 32,
	2, 31, 0,
	2, 3, 33,
	34, 33, 3,
	3, 5, 35,
	36, 34, 5,
	5, 7, 37,
	38, 36, 7,
	7, 9, 39,
	40, 38, 9,
	9, 11, 41,
	42, 40, 11,
	11, 13, 43,
	44, 42, 13,
	13, 15, 45,
	46, 44, 15,
	15, 17, 47,
	48, 46, 17,
	17, 19, 49,
	50, 48, 19,
	19, 21, 51,
	52, 50, 21,
	21, 23, 53,
	54, 52, 23,
	23, 25, 55,
	56, 54, 25,
	25, 27, 57,
	58, 56, 27,
	27, 29, 59,
	60, 58, 29,
	29, 31, 61,
	62, 60, 31,
	31, 2, 63,
	33, 62, 2,
	64, 65, 66,
	67, 66, 65,
	65, 68, 67,
	69, 67, 68,
	70, 71, 72,
	73, 72, 71,
	71, 74, 73,
	75, 73, 74,
	74, 76, 75,
	77, 75, 76,
	76, 78, 77,
	79, 77, 78,
	80, 81, 82,
	83, 82, 81,
	81, 84, 83,
	85, 83, 84,
	84, 86, 85,
	87, 85, 86,
	86, 88, 87,
	89, 87, 88,
	90, 91, 92,
	93, 92, 91,
	91, 94, 93,
	95, 93, 94,
	94, 96, 95,
	97, 95, 96,
	96, 98, 97,
	99, 97, 98,
	100, 101, 102,
	103, 102, 101,
	101, 64, 104,
	66, 103, 64,
	66, 67, 105,
	106, 105, 67,
	67, 69, 107,
	108, 106, 69,
	72, 73, 109,
	110, 109, 73,
	73, 75, 111,
	112, 110, 75,
	75, 77, 113,
	114, 112, 77,
	77, 79, 115,
	116, 114, 79,
	82, 83, 117,
	118, 117, 83,
	83, 85, 119,
	120, 118, 85,
	85, 87, 121,
	122, 120, 87,
	87, 89, 123,
	124, 122, 89,
	92, 93, 125,
	126, 125, 93,
	93, 95, 127,
	128, 126, 95,
	95, 97, 129,
	130, 128, 97,
	97, 99, 131,
	132, 130, 99,
	102, 103, 133,
	134, 133, 103,
	103, 66, 135,
	105, 134, 66,
	105, 106, 136,
	137, 136, 106,
	106, 108, 138,
	139, 137, 108,
	109, 110, 140,
	141, 140, 110,
	110, 112, 142,
	143, 141, 112,
	112, 114, 144,
	145, 143, 114,
	114, 116, 146,
	147, 145, 116,
	117, 118, 148,
	149, 148, 118,
	118, 120, 150,
	151, 149, 120,
	120, 122, 152,
	153, 151, 122,
	122, 124, 154,
	155, 153, 124,
	125, 126, 156,
	157, 156, 126,
	126, 128, 158,
	159, 157, 128,
	128, 130, 160,
	161, 159, 130,
	130, 132, 162,
	163, 161, 132,
	133, 134, 164,
	165, 164, 134,
	134, 105, 166,
	136, 165, 105,
	167, 168, 169,
	170, 169, 168,
	168, 171, 170,
	172, 170, 171,
	171, 173, 172,
	174, 172, 173,
	173, 175, 174,
	176, 174, 175,
	175, 177, 176,
	178, 176, 177,
	177, 179, 178,
	180, 178, 179,
	179, 181, 180,
	182, 180, 181,
	181, 183, 182,
	184, 182, 183,
	183, 185, 184,
	186, 184, 185,
	185, 187, 186,
	188, 186, 187,
	187, 189, 188,
	190, 188, 189,
	189, 191, 190,
	192, 190, 191,
	191, 193, 192,
	194, 192, 193,
	193, 195, 194,
	196, 194, 195,
	195, 197, 196,
	198, 196, 197,
	197, 167, 199,
	169, 198, 167,
	169, 170, 200,
	201, 200, 170,
	170, 172, 202,
	203, 201, 172,
	172, 174, 204,
	205, 203, 174,
	174, 176, 206,
	207, 205, 176,
	176, 178, 208,
	209, 207, 178,
	178, 180, 210,
	211, 209, 180,
	180, 182, 212,
	213, 211, 182,
	182, 184, 214,
	215, 213, 184,
	184, 186, 216,
	217, 215, 186,
	186, 188, 218,
	219, 217, 188,
	188, 190, 220,
	221, 219, 190,
	190, 192, 222,
	223, 221, 192,
	192, 194, 224,
	225, 223, 194,
	194, 196, 226,
	227, 225, 196,
	196, 198, 228,
	229, 227, 198,
	198, 169, 230,
	200, 229, 169,
	231, 1, 0,
	232, 200, 201,
	231, 4, 1,
	233, 201, 203,
	231, 6, 4,
	232, 203, 205,
	231, 8, 6,
	232, 205, 207,
	231, 10, 8,
	232, 207, 209,
	231, 12, 10,
	232, 209, 211,
	231, 14, 12,
	232, 211, 213,
	231, 16, 14,
	232, 213, 215,
	231, 18, 16,
	232, 215, 217,
	231, 20, 18,
	232, 217, 219,
	231, 22, 20,
	232, 219, 221,
	231, 24, 22,
	232, 221, 223,
	231, 26, 24,
	232, 223, 225,
	231, 28, 26,
	232, 225, 227,
	231, 30, 28,
	232, 227, 229,
	231, 0, 30,
	232, 229, 200
};

QMap<uint, GlConstants::Mesh> GlConstants::FUNNELS;

const GlConstants::Mesh* GlConstants::GetFunnel(uint verticesCount)
{
	Mesh* mesh = &FUNNELS[verticesCount];

	if (mesh->PxVertices.size() != 0)
		return mesh;

	mesh->Vertices  .resize((verticesCount + 1) * 8);
	mesh->Indices   .resize(verticesCount * 3);
	mesh->PxVertices.resize(verticesCount + 1);
	mesh->PxIndices .resize(verticesCount * 3);

	const float radAngleStep = 1.0f / verticesCount * 6.283185307179586476925286766559f;
	float radAngle           = 0.0f;

	for (uint idx = 0; idx < verticesCount; idx++, radAngle += radAngleStep)
	{
		float angleSin = sinf(radAngle);
		float angleCos = cosf(radAngle);

		mesh->Vertices[idx * 8 + 0] = angleCos * 100.0f;
		mesh->Vertices[idx * 8 + 1] = 40.0f;
		mesh->Vertices[idx * 8 + 2] = angleSin * 100.0f;

		mesh->Vertices[idx * 8 + 3] = -angleCos;
		mesh->Vertices[idx * 8 + 4] = 0.0f;
		mesh->Vertices[idx * 8 + 5] = -angleSin;

		mesh->Vertices[idx * 8 + 6] = angleCos;
		mesh->Vertices[idx * 8 + 7] = angleSin;

		mesh->Indices[idx * 3 + 0] = (idx + 1) % verticesCount;
		mesh->Indices[idx * 3 + 1] = idx;
		mesh->Indices[idx * 3 + 2] = verticesCount;

		mesh->PxVertices[idx].x = angleCos * 100.0f;
		mesh->PxVertices[idx].y = 40.0f;
		mesh->PxVertices[idx].z = angleSin * 100.0f;

		mesh->PxIndices[idx * 3 + 0] = mesh->Indices[idx * 3 + 0];
		mesh->PxIndices[idx * 3 + 1] = mesh->Indices[idx * 3 + 1];
		mesh->PxIndices[idx * 3 + 2] = mesh->Indices[idx * 3 + 2];
	}

	float* vxCenter = &mesh->Vertices[verticesCount * 8];
	vxCenter[0] = 0.0f;
	vxCenter[1] = 0.0f;
	vxCenter[2] = 0.0f;
	vxCenter[3] = 0.0f;
	vxCenter[4] = 1.0f;
	vxCenter[5] = 0.0f;
	vxCenter[6] = 0.0f;
	vxCenter[7] = 0.0f;

	physx::PxVec3* pxCenter = &mesh->PxVertices[verticesCount];
	pxCenter->x = 0.0f;
	pxCenter->y = 0.0f;
	pxCenter->z = 0.0f;

	return mesh;
}
